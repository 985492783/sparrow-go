//
// Copyright 1999-2020 Alibaba Group Holding Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: grpc_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Request_Request_FullMethodName = "/proto.Request/request"
)

// RequestClient is the client API for Request service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RequestClient interface {
	// Sends a commonRequest
	Request(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Payload, error)
}

type requestClient struct {
	cc grpc.ClientConnInterface
}

func NewRequestClient(cc grpc.ClientConnInterface) RequestClient {
	return &requestClient{cc}
}

func (c *requestClient) Request(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Payload, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payload)
	err := c.cc.Invoke(ctx, Request_Request_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequestServer is the server API for Request service.
// All implementations must embed UnimplementedRequestServer
// for forward compatibility
type RequestServer interface {
	// Sends a commonRequest
	Request(context.Context, *Payload) (*Payload, error)
	mustEmbedUnimplementedRequestServer()
}

// UnimplementedRequestServer must be embedded to have forward compatible implementations.
type UnimplementedRequestServer struct {
}

func (UnimplementedRequestServer) Request(context.Context, *Payload) (*Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedRequestServer) mustEmbedUnimplementedRequestServer() {}

// UnsafeRequestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RequestServer will
// result in compilation errors.
type UnsafeRequestServer interface {
	mustEmbedUnimplementedRequestServer()
}

func RegisterRequestServer(s grpc.ServiceRegistrar, srv RequestServer) {
	s.RegisterService(&Request_ServiceDesc, srv)
}

func _Request_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Request_Request_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServer).Request(ctx, req.(*Payload))
	}
	return interceptor(ctx, in, info, handler)
}

// Request_ServiceDesc is the grpc.ServiceDesc for Request service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Request_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Request",
	HandlerType: (*RequestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "request",
			Handler:    _Request_Request_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_service.proto",
}

const (
	BiRequestStream_RequestBiStream_FullMethodName = "/proto.BiRequestStream/requestBiStream"
)

// BiRequestStreamClient is the client API for BiRequestStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BiRequestStreamClient interface {
	// Sends a biStreamRequest
	RequestBiStream(ctx context.Context, opts ...grpc.CallOption) (BiRequestStream_RequestBiStreamClient, error)
}

type biRequestStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewBiRequestStreamClient(cc grpc.ClientConnInterface) BiRequestStreamClient {
	return &biRequestStreamClient{cc}
}

func (c *biRequestStreamClient) RequestBiStream(ctx context.Context, opts ...grpc.CallOption) (BiRequestStream_RequestBiStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BiRequestStream_ServiceDesc.Streams[0], BiRequestStream_RequestBiStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &biRequestStreamRequestBiStreamClient{ClientStream: stream}
	return x, nil
}

type BiRequestStream_RequestBiStreamClient interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ClientStream
}

type biRequestStreamRequestBiStreamClient struct {
	grpc.ClientStream
}

func (x *biRequestStreamRequestBiStreamClient) Send(m *Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *biRequestStreamRequestBiStreamClient) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BiRequestStreamServer is the server API for BiRequestStream service.
// All implementations must embed UnimplementedBiRequestStreamServer
// for forward compatibility
type BiRequestStreamServer interface {
	// Sends a biStreamRequest
	RequestBiStream(BiRequestStream_RequestBiStreamServer) error
	mustEmbedUnimplementedBiRequestStreamServer()
}

// UnimplementedBiRequestStreamServer must be embedded to have forward compatible implementations.
type UnimplementedBiRequestStreamServer struct {
}

func (UnimplementedBiRequestStreamServer) RequestBiStream(BiRequestStream_RequestBiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestBiStream not implemented")
}
func (UnimplementedBiRequestStreamServer) mustEmbedUnimplementedBiRequestStreamServer() {}

// UnsafeBiRequestStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BiRequestStreamServer will
// result in compilation errors.
type UnsafeBiRequestStreamServer interface {
	mustEmbedUnimplementedBiRequestStreamServer()
}

func RegisterBiRequestStreamServer(s grpc.ServiceRegistrar, srv BiRequestStreamServer) {
	s.RegisterService(&BiRequestStream_ServiceDesc, srv)
}

func _BiRequestStream_RequestBiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BiRequestStreamServer).RequestBiStream(&biRequestStreamRequestBiStreamServer{ServerStream: stream})
}

type BiRequestStream_RequestBiStreamServer interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ServerStream
}

type biRequestStreamRequestBiStreamServer struct {
	grpc.ServerStream
}

func (x *biRequestStreamRequestBiStreamServer) Send(m *Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *biRequestStreamRequestBiStreamServer) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BiRequestStream_ServiceDesc is the grpc.ServiceDesc for BiRequestStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BiRequestStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BiRequestStream",
	HandlerType: (*BiRequestStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "requestBiStream",
			Handler:       _BiRequestStream_RequestBiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc_service.proto",
}
